(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{381:function(t,a,s){t.exports=s.p+"assets/img/200225-javascript-block-scope-1.7f46914b.png"},382:function(t,a,s){t.exports=s.p+"assets/img/200225-javascript-block-scope-2.662d4ddd.png"},479:function(t,a,s){"use strict";s.r(a);var n=s(27),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),n("p",[t._v("本文档主要讲讲 ECMAScript 在 ES6 中引入的块级作用域的细节。")]),t._v(" "),n("p",[t._v("众所周知的原因，ECMAScript 在 ES6 之前是没有块级作用域的（但是一直存在块的概念，比如语句块，for 循环等）。那时候，最底层的作用域就是函数作用域。尽管没有块级作用域对于实现一段需求的功能没有影响，但是对于代码的结构比其他主流拥有块级作用域的语言有更高的要求（比如 C++、Java、Python等）。也给其他语言的开发者理解 JavaScript 带来了不便。")]),t._v(" "),n("p",[t._v("下面举两个没有块级作用域的问题：")]),t._v(" "),n("ol",[n("li",[t._v("块内部变量覆盖外部变量")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[t._v("for 循环问题：循环变量泄露为外层变量")])]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),n("p",[t._v("并且给异步和闭包的理解增加了难度：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3, 3, 3")]),t._v("\n")])])]),n("h2",{attrs:{id:"细节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#细节"}},[t._v("#")]),t._v(" 细节")]),t._v(" "),n("p",[t._v("下面我们通过 "),n("a",{attrs:{href:"https://tc39.es/ecma262/#sec-for-statement",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript 2020 the for statement"),n("OutboundLink")],1),t._v(" 是如何保证向后兼容的基础上加入块级作用域的。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(381),alt:""}})]),t._v(" "),n("p",[t._v("下面，我们分析下上面这段过程：")]),t._v(" "),n("ol",[n("li",[t._v("JavaScript engine 遇到 for 循环时，如果发现第一个表达式是 "),n("RouterLink",{attrs:{to:"/front-end/JavaScript/javascript-declaration.html"}},[t._v("lexical delcaration")]),t._v("（具体可以看我的另一篇文档），也就是有通过"),n("code",[t._v("let")]),t._v(" 或者 "),n("code",[t._v("const")]),t._v(" 声明变量。engine 会生成一个新的 environment record（这里是 loopEnv） 指向旧的 environment record（这里是 oldEnv），然后将 lexical declaration 声明的变量全部绑定到 loopEnv 后将 loopEnv 绑定到当前的 execution context。")],1),t._v(" "),n("li",[t._v("绑定好新的 loopEnv，算法就进入了 "),n("code",[t._v("ForBodyEvaluation")]),t._v("，也就是我们的循环体。")])]),t._v(" "),n("p",[t._v("那么在循环体里面，engine 会怎么做呢？规范写的一清二楚，如下图：\n"),n("img",{attrs:{src:s(382),alt:""}})]),t._v(" "),n("p",[t._v("在这里，我只需要注意 "),n("code",[t._v("CreatePerIterationEnvironment")]),t._v(" ，这个抽象操作是用来创建每次迭代的 environment record的。也就是说，每重新进入一次 for body，如果有 let declaration，就会重新生成一个 environment record（这也是为什么称boundNames 为 perIterationLets的原因）。")]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("执行完所有的for循环代码，重新将 oldEnv 绑定到当前的 execution context。")])]),t._v(" "),n("p",[t._v("我们知道， execution context 通常有 3种：")]),t._v(" "),n("ul",[n("li",[t._v("global execution context")]),t._v(" "),n("li",[t._v("function execution context")]),t._v(" "),n("li",[t._v("eval execution context")])]),t._v(" "),n("p",[t._v("并不包含 block execution context。因此 ECMAScript 通过识别 let/const declaration 来创建新的Environment record，并以此达到块级作用域的目的。")]),t._v(" "),n("p",[t._v("在ECMAScript 规范中其他可能牵扯到块级作用域的地方同样是类似的算法逻辑。")]),t._v(" "),n("h2",{attrs:{id:"了解这些有什么意义呢？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#了解这些有什么意义呢？"}},[t._v("#")]),t._v(" 了解这些有什么意义呢？")]),t._v(" "),n("p",[t._v("首先谈点虚的：")]),t._v(" "),n("ol",[n("li",[t._v("了解语言底层的细节，可以帮助我们思考语言规范设计者在引入新的概念时是如何权衡的，有助于我们扩展思维。")])]),t._v(" "),n("p",[t._v("我们再看段代码：")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里会输出 1, 2, 3")]),t._v("\n")])])]),n("p",[t._v("如果我们不了解内部的细节，如何能够知道为什么会输出 "),n("code",[t._v("1,2,3")]),t._v(" 呢？死记硬背然后靠自己联想吗？\n看过规范的我们知道，JavaScript engine 在for 循环中遇到 let declaration 时，在每一个迭代过程都会新建一个 environment record，并且复制之前的 boundName。也就是说，每一次迭代过程中 setTimeout 方法里面绑定的 i 都是不同的 i。")])])}),[],!1,null,null,null);a.default=e.exports}}]);