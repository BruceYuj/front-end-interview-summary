(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{363:function(t,s,a){t.exports=a.p+"assets/img/4-1.9960b385.png"},364:function(t,s,a){t.exports=a.p+"assets/img/4-2.e7b1e2f0.jpg"},365:function(t,s,a){t.exports=a.p+"assets/img/4-3.c8e17a03.jpg"},366:function(t,s,a){t.exports=a.p+"assets/img/4-4.eca469ec.png"},367:function(t,s,a){t.exports=a.p+"assets/img/4-5.3dd2b2f3.jpg"},465:function(t,s,a){"use strict";a.r(s);var r=a(27),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("blockquote",[r("p",[t._v("在我看来，大部分面试的算法题从来都不是难在思维，而是缺乏系统的教学。它不像数学属于普及的基础教育，算法题目的大部分知识、技巧往往都局限于 competitive programming 当中 (比如各种 OI 竞赛、 ACM 竞赛等)，这些都是大部分计算机行业从业者接触不到的。它就像一个大群体中一个半封闭的小群体一样，系统的知识就在那里，只是我们很少会主动走进去。因此，我期望将这些知识给带出来，就引申出了本系列文章和视频。")])]),t._v(" "),r("p",[t._v("二分法是一种随处可见却又非常精妙的算法，我们最熟知的用法是在一个有序数组中查找某个 target 是否存在。初学二分法的同学可能会被各种边界情况、不同写法、是开区间还是闭区间等细节弄糊涂，以至于舍本逐末。其实并不需要如此，我们只需要记住一种最方便的写法并理解它即可。")]),t._v(" "),r("h2",{attrs:{id:"正文"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[t._v("#")]),t._v(" 正文")]),t._v(" "),r("p",[t._v("通常我们将二分法分为整数域上的二分和实数域上的二分。")]),t._v(" "),r("ul",[r("li",[t._v("整数二分的细节在于"),r("strong",[t._v("终止边界、左右区间取舍时的开闭情况")]),t._v("，来避免"),r("strong",[t._v("漏掉答案或者造成死循环")]),t._v("。")]),t._v(" "),r("li",[t._v("实数二分的细节在于"),r("strong",[t._v("精度问题")])])]),t._v(" "),r("p",[t._v("因此，本文会分别给出 "),r("strong",[t._v("整数二分")]),t._v(" 和 "),r("strong",[t._v("实数二分")]),t._v(" 的模板，来帮助大家解决 90% 以上的广泛二分问题。广泛二分问题指的是如下几种类型：")]),t._v(" "),r("ol",[r("li",[t._v("明显二分问题（题面上能一下看出二分的）")]),t._v(" "),r("li",[t._v("二分答案类型问题（值域上二分）")]),t._v(" "),r("li",[t._v("min(max()) 和 max(min())")]),t._v(" "),r("li",[t._v("最大/最小平均值(max/min average)")]),t._v(" "),r("li",[t._v("特殊第 K 小问题")])]),t._v(" "),r("p",[t._v("理解了这几种题型，也就能够理解接近 100 道的算法题，基本都是 leetcode hard/medium 级别的。")]),t._v(" "),r("p",[t._v("在给出模板之前，"),r("strong",[t._v("我们得先理解什么是二分？")])]),t._v(" "),r("p",[t._v("二分不等价于序列上的单调性。它的本质是：")]),t._v(" "),r("blockquote",[r("p",[t._v("如果我们能够通过某种特性将一个区间划分成两个区间，左边区间满足某种特性；右边区间不满足某种特性。那么我们就能够通过二分法来寻找左区间的右端点或者右区间的左端点。换句话讲，"),r("strong",[t._v("有单调性一定可以二分，但是二分不一定要有单调性")]),t._v("。")])]),t._v(" "),r("blockquote",[r("p",[r("em",[t._v("更多细节可以在 B 站搜索 《百学原理》 up主，面试向算法系列 - 1.4 二分法的经典应用")])])]),t._v(" "),r("p",[r("img",{attrs:{src:a(363),alt:""}}),t._v("\n（图 4-1）")]),t._v(" "),r("h3",{attrs:{id:"整数二分模板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#整数二分模板"}},[t._v("#")]),t._v(" 整数二分模板")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("binary_search")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 模板一：寻找右区间的左端点(上图红色部分)")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意 l+r")]),t._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" check"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mid"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" r "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("binary_search")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 模板二：寻找左区间的右端点（上图蓝色部分）")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("r"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 注意 l+r+1")]),t._v("\n\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" check"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mid"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n        "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" r "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),r("p",[r("strong",[t._v("整数二分为什么会有两个模板？")])]),t._v(" "),r("p",[t._v("这是为了方便构造 "),r("code",[t._v("check()")]),t._v(" 方法和对答案的求解。")]),t._v(" "),r("p",[t._v("我们来看 "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 34. 在排序数组中查找元素的第一个和最后一个位置（题目视频中有详细讲解）"),r("OutboundLink")],1),t._v("。")]),t._v(" "),r("blockquote",[r("p",[t._v("给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。你的算法时间复杂度必须是 O(log n) 级别。"),r("br"),t._v("\n如果数组中不存在目标值，返回 [-1, -1]。"),r("br"),t._v("\n示例 1:"),r("br"),t._v("\n输入: nums = [5,7,7,8,8,10], target = 8"),r("br"),t._v("\n输出: [3,4]"),r("br"),t._v("\n示例 2:"),r("br"),t._v("\n输入: nums = [5,7,7,8,8,10], target = 6"),r("br"),t._v("\n输出: [-1,-1]")])]),t._v(" "),r("p",[r("strong",[t._v("如何寻找 target 在数组中的开始位置呢？")])]),t._v(" "),r("p",[t._v("很明显，由于从 "),r("strong",[t._v("开始位置往后")]),t._v(" 所有的值都是 "),r("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[r("mjx-math",{staticClass:" MJX-TEX"},[r("mjx-mo",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"2265"}})],1),r("mjx-mi",{staticClass:"mjx-i",attrs:{space:"4"}},[r("mjx-c",{attrs:{c:"t"}})],1),r("mjx-mi",{staticClass:"mjx-i"},[r("mjx-c",{attrs:{c:"a"}})],1),r("mjx-mi",{staticClass:"mjx-i"},[r("mjx-c",{attrs:{c:"r"}})],1),r("mjx-mi",{staticClass:"mjx-i"},[r("mjx-c",{attrs:{c:"g"}})],1),r("mjx-mi",{staticClass:"mjx-i"},[r("mjx-c",{attrs:{c:"e"}})],1),r("mjx-mi",{staticClass:"mjx-i"},[r("mjx-c",{attrs:{c:"t"}})],1)],1)],1),t._v(" 的直接构造性质，如下所示：")],1),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("check")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" target\n")])])]),r("p",[t._v("也就是我们通过上述 "),r("code",[t._v("check()")]),t._v(" 方法将数组划分为两个区间，"),r("strong",[t._v("开始位置")]),t._v("就是右区间的左端点(也就是模板一)，如下图 4-2。\n"),r("img",{attrs:{src:a(364),alt:""}}),t._v("\n（图 4-2）")]),t._v(" "),r("p",[t._v("那么，我们是否可以用 "),r("strong",[t._v("模板二")]),t._v(" 求解开始位置呢？很显然也是可以的，只是会麻烦一些，如图 4-2 中的 4。我们可以通过 "),r("code",[t._v("x < target")]),t._v(" 求得左区间的右端点，也就是最后一个 "),r("code",[t._v("< target")]),t._v(" 的位置，假设为 "),r("code",[t._v("i")]),t._v("，那么 "),r("code",[t._v("i+1")]),t._v(" 显然就是 "),r("code",[t._v("target")]),t._v(" 的起始位置(这里不考虑不存在情况)。")]),t._v(" "),r("p",[t._v("因此，我们可以得出一个结论："),r("strong",[t._v("模板一")]),t._v(" 和 "),r("strong",[t._v("模板二")]),t._v(" 都可以得出具体解，只是在面对不同问题时哪个更加方便而已。")]),t._v(" "),r("p",[r("strong",[t._v("那么该如何求解结束位置呢？")])]),t._v(" "),r("p",[t._v("这个时候使用 "),r("strong",[t._v("模板二")]),t._v(" 就更加方便了，如图 4-2 中的 3 所示，我们只要构造 "),r("code",[t._v("check()")]),t._v(" 为 "),r("code",[t._v("x <= target")]),t._v(" 即可。")]),t._v(" "),r("p",[t._v("下面我们来看模板的细节，一个很重要的点是：")]),t._v(" "),r("ul",[r("li",[t._v("模板一： "),r("code",[t._v("mid = (l+r)//2")]),t._v("; "),r("code",[t._v("r = mid")]),t._v("; "),r("code",[t._v("l = mid+1")])]),t._v(" "),r("li",[t._v("模板二："),r("code",[t._v("mid = (l+r+1)//2")]),t._v("; "),r("code",[t._v("l = mid")]),t._v("; "),r("code",[t._v("r = mid+1")])])]),t._v(" "),r("p",[r("strong",[t._v("为什么要这样写呢？")]),r("br"),t._v("\n这两种写法都是在解决同一个问题 - "),r("strong",[t._v("避免范围缩小到 2 时，产生死循环")])]),t._v(" "),r("p",[r("strong",[t._v("为什么改变写法就有可能产生死循环呢？")]),t._v(" 其实举个反例即可。"),r("br"),t._v("\n本身 "),r("strong",[t._v("模板一就是为了获得右区间的左端点")]),t._v("，所以  "),r("code",[t._v("r = mid")]),t._v(" 和 "),r("code",[t._v("l = mid+1")]),t._v("是肯定的，大家记住即可。那么如果模板一变成 "),r("code",[t._v("mid = (l+r+1)//2")]),t._v("，也就是在 "),r("code",[t._v("[i, i+1]")]),t._v(" 时， "),r("code",[t._v("mid = i+1")]),t._v(". 可能会产生如下图所示的情况：\n"),r("img",{attrs:{src:a(365),alt:""}})]),t._v(" "),r("p",[t._v("模板二的证明和模板一类似。")]),t._v(" "),r("p",[r("strong",[t._v("下面我们来看下模板一和模板二是如何运用在基础题目里面的（以下所有题目在 B站 1.4.1 和 1.4.2 中都有详细讲解）")])]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/search-a-2d-matrix/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 74. 搜索二维矩阵"),r("OutboundLink")],1),t._v(" "),r("img",{attrs:{src:a(366),alt:""}})])]),t._v(" "),r("p",[t._v("题目问的是 - 是否存在目标值，所以套用模板一和模板二都可以。稍微有点变形的是题目给出的序列是二维的，因此我们需要通过简单的变形将二维转为一维。")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" n "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n    row "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v(" n\n    col "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" n \n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" matrix"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("row"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("col"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" target"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" r "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" matrix"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),t._v("n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v("n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" target"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),t._v("\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 例题 3 - 153. 寻找旋转排序数组中的最小值"),r("OutboundLink")],1)])]),t._v(" "),r("blockquote",[r("p",[t._v("假设按照升序排序的数组在预先未知的某个点上进行了旋转。( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。请找出其中最小的元素。你可以假设数组中不存在重复元素。")])]),t._v(" "),r("p",[r("img",{attrs:{src:a(367),alt:""}}),t._v("\n如上图所示，可以直接根据模板一构造出 "),r("code",[t._v("check()")]),t._v(" 方法（代码就不给了）。")]),t._v(" "),r("p",[r("strong",[t._v("如果允许重复值呢？比如")]),t._v(" "),r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 154. 寻找旋转排序数组中的最小值 II"),r("OutboundLink")],1)]),t._v(" "),r("p",[t._v("其实重复值只是迷惑了我们的眼睛，尽管在判断到重复时（出现 "),r("code",[t._v("check(mid) == nums[r]")]),t._v("），我们无法划分区间。但是很显然，去掉其中一个不会对我们最终的结果产生影响，所以我们只需要 "),r("code",[t._v("r--")]),t._v(" 即可。")]),t._v(" "),r("div",{staticClass:"language-python extra-class"},[r("pre",{pre:!0,attrs:{class:"language-python"}},[r("code",[t._v("l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\nr "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" n"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("//")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" nums"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" nums"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        r "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" nums"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("mid"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" nums"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("r"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        l "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        r "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mid\n\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nums"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("l"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),r("p",[t._v("按照这种做法，"),r("a",{attrs:{href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 81. 搜索旋转排序数组 II"),r("OutboundLink")],1),t._v(" 的解法也就显而易见了。")]),t._v(" "),r("p",[r("strong",[t._v("除了完成上述题目，还有一些其他题目大家可以尝试：")])]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-peak-element/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 162. 寻找峰值"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/h-index-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("leetcode: 275. H 指数 II"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"实数二分模板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#实数二分模板"}},[t._v("#")]),t._v(" 实数二分模板")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("binary_search(l , r): // 寻找结果\n\n    eps = 1e-6\n    while r - l >= eps:\n        mid = (l+r) / 2\n\n        if check(mid): r = mid\n        else: l = mid\n")])])]),r("p",[t._v("实数二分不会存在整数二分的细节问题，只需要注意精度问题即可。至于具体原因，大家简单画个图即可，或者类比于微积分，当两个点无限接近时，我们就认为其在无限小时是一个点。")]),t._v(" "),r("p",[t._v("实数二分最常见的例子就是：")]),t._v(" "),r("ul",[r("li",[t._v("二分法求 "),r("code",[t._v("sqrt(x)")])]),t._v(" "),r("li",[t._v("二分法求三次方根 "),r("a",{attrs:{href:"https://www.acwing.com/problem/content/792/",target:"_blank",rel:"noopener noreferrer"}},[t._v("acwing: 790. 数的三次方根"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("具体代码我就不给了，想要更详细的过程可以看 "),r("strong",[t._v("B 站视频 1.4.1 和 1.4.2")])]),t._v(" "),r("p",[r("strong",[t._v("课后习题")])]),t._v(" "),r("ol",[r("li",[r("a",{attrs:{href:"https://www.acwing.com/problem/content/description/698/",target:"_blank",rel:"noopener noreferrer"}},[t._v("acwing: 696. 哈默队长(Google Kickstart2013 Practice Round Problem B)"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("ol",[r("li",[t._v("整数二分的两个模板")]),t._v(" "),r("li",[t._v("实数二分的模板")]),t._v(" "),r("li",[t._v("二分法的经典应用一")])]),t._v(" "),r("p",[t._v("剩下的 4 种经典应用请看下篇。")])])}),[],!1,null,null,null);s.default=e.exports}}]);